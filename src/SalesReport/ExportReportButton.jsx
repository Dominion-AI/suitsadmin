import { useState } from "react";
import React from "react";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
autoTable(jsPDF);

/**
 * Export report as a PDF with charts and detailed data.
 */
function ExportReportButton({ 
    startDate, 
    endDate, 
    salesData, 
    chartRefs, 
    disabled 
}) {
    const [loading, setLoading] = useState(false);
    const [status, setStatus] = useState(null);
    const [selectedSections, setSelectedSections] = useState({
        kpis: true,
        status: true,
        trends: true,
        products: true,
    });

    /**
     * Capture chart image as Base64
     */
    const captureChartImage = (chartRef) => {
        if (chartRef?.current?.canvas) {
            return chartRef.current.canvas.toDataURL("image/png");
        }
        return null;
    };

    /**
     * Add page numbers
     */
    const addPageNumbers = (doc) => {
        const pageCount = doc.internal.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setFontSize(10);
            doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 20, doc.internal.pageSize.height - 10);
        }
    };

    /**
     * Export report to PDF
     */
    const handleExport = async () => {
        if (disabled || loading) return;

        setLoading(true);
        setStatus(null);

        try {
            // Create a new jsPDF instance
            const doc = new jsPDF("p", "mm", "a4");
            
            // Explicitly add autoTable to doc if it doesn't exist
            if (typeof doc.autoTable !== 'function') {
                // Import jspdf-autotable dynamically to ensure it's fully loaded
                await import("jspdf-autotable").then(() => {
                    // The import should add autoTable to the jsPDF prototype
                    if (typeof doc.autoTable !== 'function') {
                        throw new Error("jspdf-autotable not properly loaded");
                    }
                });
            }
            
            const fileName = `Sales_Report_${startDate}_to_${endDate}.pdf`;

            let yPosition = 20;

            /** COVER PAGE **/
            doc.setFont("helvetica", "bold");
            doc.setFontSize(22);
            doc.text("Sales Report", 105, yPosition, { align: "center" });
            yPosition += 10;

            doc.setFontSize(14);
            doc.setFont("helvetica", "normal");
            doc.text(`From: ${startDate} To: ${endDate}`, 105, yPosition, { align: "center" });

            yPosition += 20;
            doc.setFontSize(12);
            doc.text("Generated by: Your Business Name", 105, yPosition, { align: "center" });
            doc.text("Website: www.yourbusiness.com", 105, yPosition + 10, { align: "center" });

            doc.addPage(); // Start content on a new page
            yPosition = 20;

            /** KPIs SECTION **/
            if (selectedSections.kpis) {
                doc.setFontSize(16);
                doc.text("Key Performance Indicators (KPIs)", 14, yPosition);
                yPosition += 10;

                doc.autoTable({
                    startY: yPosition,
                    head: [["Metric", "Value"]],
                    body: [
                        ["Total Sales", salesData.totalSales],
                        ["Total Revenue", `$${salesData.totalRevenue.toLocaleString()}`],
                        ["Avg Sale Value", `$${salesData.avgSaleValue.toLocaleString()}`],
                    ],
                });

                yPosition = doc.lastAutoTable.finalY + 10;
            }

            /** SALES STATUS SECTION **/
            if (selectedSections.status && salesData.statusData.length > 0) {
                doc.setFontSize(16);
                doc.text("Sales Status Breakdown", 14, yPosition);
                yPosition += 10;

                const statusChartImg = captureChartImage(chartRefs.statusChartRef);
                if (statusChartImg) {
                    doc.addImage(statusChartImg, "PNG", 14, yPosition, 180, 90);
                    yPosition += 100;
                }

                doc.autoTable({
                    startY: yPosition,
                    head: [["Status", "Count", "Total Revenue"]],
                    body: salesData.statusData.map((item) => [
                        item.status,
                        item.count,
                        `$${item.totalAmount.toLocaleString()}`,
                    ]),
                    foot: [["Total", salesData.totalSales, `$${salesData.totalRevenue.toLocaleString()}`]],
                });

                yPosition = doc.lastAutoTable.finalY + 10;
            }

            /** SALES TRENDS SECTION **/
            if (selectedSections.trends && salesData.trendData.length > 0) {
                // Check if we need to add a new page based on remaining space
                if (yPosition > 180) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(16);
                doc.text("Sales Trends (Over Time)", 14, yPosition);
                yPosition += 10;

                const trendChartImg = captureChartImage(chartRefs.trendChartRef);
                if (trendChartImg) {
                    doc.addImage(trendChartImg, "PNG", 14, yPosition, 180, 90);
                    yPosition += 100;
                }

                doc.autoTable({
                    startY: yPosition,
                    head: [["Date", "Sales Count", "Total Revenue"]],
                    body: salesData.trendData.map((item) => [
                        item.date,
                        item.count,
                        `$${item.totalAmount.toLocaleString()}`,
                    ]),
                });

                yPosition = doc.lastAutoTable.finalY + 10;
            }

            /** TOP PRODUCTS SECTION **/
            if (selectedSections.products && salesData.topProducts.length > 0) {
                // Check if we need to add a new page based on remaining space
                if (yPosition > 180) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(16);
                doc.text("Top-Selling Products", 14, yPosition);
                yPosition += 10;

                const productChartImg = captureChartImage(chartRefs.productChartRef);
                if (productChartImg) {
                    doc.addImage(productChartImg, "PNG", 14, yPosition, 180, 90);
                    yPosition += 100;
                }

                doc.autoTable({
                    startY: yPosition,
                    head: [["Product", "Quantity Sold", "Total Revenue"]],
                    body: salesData.topProducts.map((item) => [
                        item.product,
                        item.quantity,
                        `$${item.totalAmount.toLocaleString()}`,
                    ]),
                });
            }

            /** ADD FOOTER WITH PAGE NUMBERS **/
            addPageNumbers(doc);

            // Save the PDF
            doc.save(fileName);
            setStatus({ type: "success", message: "PDF exported successfully!" });
        } catch (error) {
            console.error("Failed to export report:", error);
            setStatus({ type: "error", message: `Failed to export report: ${error.message}` });
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="flex flex-col items-end space-y-4">
            <div className="w-full p-4 bg-white rounded-lg shadow-sm border border-gray-200">
                <h3 className="text-lg font-semibold mb-4">Select Report Sections</h3>
                <div className="grid grid-cols-2 gap-4 mb-4">
                    {Object.keys(selectedSections).map((section) => (
                        <label key={section} className="flex items-center space-x-2 cursor-pointer">
                            <input
                                type="checkbox"
                                checked={selectedSections[section]}
                                onChange={(e) =>
                                    setSelectedSections({ ...selectedSections, [section]: e.target.checked })
                                }
                                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            />
                            <span className="capitalize">{section}</span>
                        </label>
                    ))}
                </div>

                <button
                    onClick={handleExport}
                    disabled={disabled || loading}
                    className={`w-full px-4 py-2 rounded font-medium ${
                        disabled || loading 
                            ? "bg-gray-400 cursor-not-allowed" 
                            : "bg-blue-600 hover:bg-blue-700 transition-colors"
                    } text-white`}
                >
                    {loading ? (
                        <span className="flex items-center justify-center">
                            <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Exporting...
                        </span>
                    ) : (
                        "Export as PDF"
                    )}
                </button>
            </div>

            {status && (
                <div 
                    className={`w-full p-4 rounded-lg ${
                        status.type === "success" 
                            ? "bg-green-100 text-green-800 border border-green-200" 
                            : "bg-red-100 text-red-800 border border-red-200"
                    }`}
                >
                    {status.message}
                </div>
            )}
        </div>
    );
}

export default ExportReportButton;